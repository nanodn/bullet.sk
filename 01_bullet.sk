###
installation guide:
    download jar and native release sp library from https://github.com/stephengold/Libbulletjme/releases/latest
        for example, jar and windows 64-bit release sp library
            Libbulletjme-<version>.jar
            Windows64ReleaseSp_bulletjme.dll
    put them into plugins/skript-reflect/
###

import:
    com.jme3.bullet.collision.PhysicsCollisionObject
    com.jme3.bullet.collision.PhysicsRayTestResult
    com.jme3.bullet.collision.shapes.BoxCollisionShape
    com.jme3.bullet.collision.shapes.CollisionShape
    com.jme3.bullet.collision.shapes.PlaneCollisionShape
    com.jme3.bullet.collision.shapes.SphereCollisionShape
    com.jme3.bullet.joints.motors.MotorParam
    com.jme3.bullet.joints.motors.RotationMotor
    com.jme3.bullet.joints.motors.TranslationMotor
    com.jme3.bullet.joints.New6Dof
    com.jme3.bullet.joints.PhysicsJoint
    com.jme3.bullet.objects.PhysicsRigidBody
    com.jme3.bullet.PhysicsSpace
    com.jme3.bullet.RotationOrder
    com.jme3.math.Matrix3f as JmeMatrix3f
    com.jme3.math.Plane
    com.jme3.math.Quaternion as JmeQuaternion
    com.jme3.math.Vector3f as JmeVector3f
    com.jme3.system.NativeLibraryLoader
    java.io.File
    java.util.logging.Level
    org.joml.Quaternionf as McQuaternionf # should be replaced with skript's quaternion Skript 2.10+

local function jmeSilence():
    loop (PhysicsSpace.logger, PhysicsRigidBody.logger2, New6Dof.logger2):
        (loop-value).setLevel(Level.WARNING)

on load:
    NativeLibraryLoader.loadLibbulletjme(true, new File("plugins/skript-reflect"), "Release", "Sp")
    jmeSilence()

# math

function jmeQuaternion(x: objects) :: object:
    if all:
        size of {_x::*} = 1
        {_x::1} is an instance of McQuaternionf
    then:
        return new JmeQuaternion({_x::1}.x, {_x::1}.y, {_x::1}.z, {_x::1}.w)
    size of {_x::*} = 4
    {_x::1} is a number
    return new JmeQuaternion({_x::1}, {_x::2}, {_x::3}, {_x::4})

function fromJmeQuaternion(quat: object) :: object:
    {_quat} is an instance of JmeQuaternion
    return new McQuaternionf({_quat}.x, {_quat}.y, {_quat}.z, {_quat}.w)

function jmeVector3f(x: objects) :: object:
    if all:
        size of {_x::*} = 1
        {_x::1} is a vector
    then:
        return new JmeVector3f(x of {_x::1}, y of {_x::1}, z of {_x::1})
    size of {_x::*} = 3
    {_x::1} is a number
    return new JmeVector3f({_x::1}, {_x::2}, {_x::3})

function fromJmeVector3f(vector: object) :: vector:
    {_vector} is an instance of JmeVector3f
    return vector({_vector}.x, {_vector}.y, {_vector}.z)

function jmeMatrix3f(x: objects) :: object:
    if all:
        size of {_x::*} = 1
        {_x::1} = "identity"
    then:
        return new JmeMatrix3f()
    size of {_x::*} = 9
    {_x::1} is a number
    return new JmeMatrix3f({_x::1}, {_x::2}, {_x::3}, {_x::4}, {_x::5}, {_x::6}, {_x::7}, {_x::8}, {_x::9})

###
PhysicsSpace
###

expression [[lib]bullet[jme]] [a] [new] dbvt physics space:
    get:
        return new PhysicsSpace(PhysicsSpace.BroadphaseType.DBVT)

object property [[lib]bullet[jme]] physics space gravity:
    return type: vector
    get:
        expr 1 is an instance of PhysicsSpace
        return fromJmeVector3f((expr 1).[PhysicsSpace]getGravity(null))
    set:
        expr 1 is an instance of PhysicsSpace
        (expr 1).[PhysicsSpace]setGravity(jmeVector3f(change value))

# it doesn't make sense to provide the list of joints for my use case but w/e
plural object property [[lib]bullet[jme]] [physics space] (1¦rigid[ ]bodies|2¦joints):
    get:
        expr 1 is an instance of PhysicsSpace
        if parse mark is 1:
            return ...(expr 1).[PhysicsSpace]getRigidBodyList().stream()
        if parse mark is 2:
            return ...(expr 1).[PhysicsSpace]getJointList().stream()
    add:
        expr 1 is an instance of PhysicsSpace
        if parse mark is 1:
            change value is an instance of PhysicsRigidBody
            (expr 1).[PhysicsSpace]addCollisionObject(change value)
        if parse mark is 2:
            change value is an instance of PhysicsJoint
            (expr 1).[PhysicsSpace]addJoint(change value)
    remove:
        expr 1 is an instance of PhysicsSpace
        if parse mark is 1:
            change value is an instance of PhysicsRigidBody
            (expr 1).[PhysicsSpace]removeCollisionObject(change value)
        if parse mark is 2:
            change value is an instance of PhysicsJoint
            (expr 1).[PhysicsSpace]removeJoint(change value)
    delete:
        expr 1 is an instance of PhysicsSpace
        if parse mark is 1:
            loop ...(expr 1).[PhysicsSpace]getRigidBodyList().stream():
                (expr 1).[PhysicsSpace]removeCollisionObject(loop-value)
        if parse mark is 2:
            loop ...(expr 1).[PhysicsSpace]getJointList().stream():
                (expr 1).[PhysicsSpace]removeJoint(loop-value)

effect [[lib]bullet[jme]] destroy physics space %object%:
    trigger:
        expr 1 is an instance of PhysicsSpace
        (expr 1).[PhysicsSpace]destroy()

effect [[lib]bullet[jme]] (tick|update) physics space %object% [(by|with)] [time [interval]] %number%[,] [and] [[max] step[s]] %integer%:
    trigger:
        expr 1 is an instance of PhysicsSpace
        (expr 1).[PhysicsSpace]update(expr 2, expr 3)

expression [[lib]bullet[jme]] ray[ ]trace [result[s]] in physics space %object% from %vector% to %vector%:
    get:
        expr 1 is an instance of PhysicsSpace
        return ...(expr 1).rayTest(jmeVector3f(expr 2), jmeVector3f(expr 3))

###
PhysicsRayTestResult
###

object property [[lib]bullet[jme]] ray[ ]trace [result] collision object:
    get:
        expr 1 is an instance of PhysicsRayTestResult
        return (expr 1).[PhysicsRayTestResult]getCollisionObject()

object property [[lib]bullet[jme]] ray[ ]trace [result] hit fraction:
    return type: number
    get:
        expr 1 is an instance of PhysicsRayTestResult
        return (expr 1).[PhysicsRayTestResult]getHitFraction()

object property [[lib]bullet[jme]] ray[ ]trace [result] hit normal:
    return type: vector
    get:
        expr 1 is an instance of PhysicsRayTestResult
        return fromJmeVector3f((expr 1).[PhysicsRayTestResult]getHitNormalLocal(null))

###
CollisionShape
###

expression [[lib]bullet[jme]] [a] [new] box collision shape [with] [half extent[s]] (1¦%vector%|2¦[xyz] %number%|3¦[x] %number%[,] [and] [y] %number%[,] [and] [z] %number%):
    get:
        if parse mark is 1:
            return new BoxCollisionShape(jmeVector3f(expr 1))
        if parse mark is 2:
            return new BoxCollisionShape(expr 2)
        if parse mark is 3:
            return new BoxCollisionShape(expr 3, expr 4, expr 5)

expression [[lib]bullet[jme]] [a] [new] spher(e|ical) collision shape [with] [radius] %number%:
    get:
        return new SphereCollisionShape(expr 1)

expression [[lib]bullet[jme]] [a] [new] plane collision shape [with] [const[ant]] %number%:
    get:
        return new PlaneCollisionShape(new Plane(JmeVector3f.UNIT_Y, expr 1))

object property [[lib]bullet[jme]] box collision shape half extent[s]:
    return type: vector
    get:
        expr 1 is an instance of BoxCollisionShape
        return fromJmeVector3f((expr 1).[BoxCollisionShape]getHalfExtents(null))

object property [[lib]bullet[jme]] sphere collision shape radius:
    return type: number
    get:
        expr 1 is an instance of SphereCollisionShape
        return (expr 1).[SphereCollisionShape]getRadius()

object property condition [a[n]] [[lib]bullet[jme]] (1¦box|2¦spher(e|ical)|3¦plane) collision shape:
    check:
        if parse mark is 1:
            if expr 1 is an instance of BoxCollisionShape:
                return true
        if parse mark is 2:
            if expr 1 is an instance of SphereCollisionShape:
                return true
        if parse mark is 3:
            if expr 1 is an instance of PlaneCollisionShape:
                return true
        return false

###
New6Dof
https://stephengold.github.io/Libbulletjme/lbj-en/English/new6dof.html
###

expression [[lib]bullet[jme]] [a] [new] simple new6dof joint (connecting|linking) %object%[,] [with] pivot [point] %vector% to %object%[,] [with] pivot [point] %vector%:
    get:
        return new New6Dof(expr 1, expr 3, jmeVector3f(expr 2), jmeVector3f(expr 4), JmeMatrix3f.IDENTITY, JmeMatrix3f.IDENTITY, RotationOrder.XYZ)

expression [[lib]bullet[jme]] [a] [new] new6dof joint (connecting|linking) %object%[,] [with] pivot [point] %vector%[,] [and] [with] rot[ation ]mat[rix] %object% to %object%[,] [with] pivot [point] %vector%[,] [and] [with] rot[ation ]mat[rix] %object%[,] [and] [(with|using)] rotation order <(xyz|xzy|yxz|yzx|zxy|zyx)>:
    get:
        set {_order} to RotationOrder.valueOf(regex 1 in upper case)
        return new New6Dof(expr 1, expr 4, jmeVector3f(expr 2), jmeVector3f(expr 5), expr 3, expr 6, {_order})

# see the link below for the list of motor parameters
# https://stephengold.github.io/Libbulletjme/javadoc/master/com/jme3/bullet/joints/motors/MotorParam.html
object property [[lib]bullet[jme]] new6dof joint [motor] param[eter] (1¦x translation|2¦y translation|3¦z translation|4¦x rotation|5¦y rotation|6¦z rotation) <(.+)>:
    return type: number
    parse:
        set {_param} to MotorParam.valueOf(regex 1 in pascal case)
        set {_dofindex} to (parse mark) - 1
        continue
    get:
        return (expr 1).[New6Dof]get({_param}, {_dofindex})
    set:
        (expr 1).[New6Dof]set({_param}, {_dofindex}, change value)
    delete:
        set {_default} to {_param}.[MotorParam]defaultForTranslationMotor()
        if {_dofindex} > 2:
            set {_default} to {_param}.[MotorParam]defaultForRotationMotor()
        (expr 1).[New6Dof]set({_param}, {_dofindex}, {_default})

object property [[lib]bullet[jme]] new6dof joint translation motor:
    get:
        return (expr 1).[New6Dof]getTranslationMotor()

object property [[lib]bullet[jme]] new6dof joint (1¦x|2¦y|3¦z) [axis] rotation motor:
    get:
        return (expr 1).[New6Dof]getRotationMotor((parse mark) - 1)

###
TranslationMotor
RotationMotor
###

object property [[lib]bullet[jme]] new6dof translation motor <(x|y|z)> [axis] (1¦motor|2¦servo|3¦spring|4¦stiffness|5¦damping) state:
    return type: boolean
    parse:
        if regex 1 is "x":
            set {_axis} to 0
        if regex 1 is "y":
            set {_axis} to 1
        if regex 1 is "z":
            set {_axis} to 2
        continue
    get:
        expr 1 is an instance of TranslationMotor
        if parse mark is 1:
            return (expr 1).isMotorEnabled({_axis})
        if parse mark is 2:
            return (expr 1).isServoEnabled({_axis})
        if parse mark is 3:
            return (expr 1).isSpringEnabled({_axis})
        if parse mark is 4:
            return (expr 1).isStiffnessLimited({_axis})
        if parse mark is 5:
            return (expr 1).isDampingLimited({_axis})
    set:
        expr 1 is an instance of TranslationMotor
        if parse mark is 1:
            (expr 1).setMotorEnabled({_axis}, change value)
        if parse mark is 2:
            (expr 1).setServoEnabled({_axis}, change value)
        if parse mark is 3:
            (expr 1).setSpringEnabled({_axis}, change value)
        if parse mark is 4:
            (expr 1).setStiffnessLimited({_axis}, change value)
        if parse mark is 5:
            (expr 1).setDampingLimited({_axis}, change value)

object property [[lib]bullet[jme]] new6dof rotation motor (1¦motor|2¦servo|3¦spring|4¦stiffness|5¦damping) state:
    return type: boolean
    get:
        expr 1 is an instance of RotationMotor
        if parse mark is 1:
            return (expr 1).isMotorEnabled()
        if parse mark is 2:
            return (expr 1).isServoEnabled()
        if parse mark is 3:
            return (expr 1).isSpringEnabled()
        if parse mark is 4:
            return (expr 1).isStiffnessLimited()
        if parse mark is 5:
            return (expr 1).isDampingLimited()
    set:
        expr 1 is an instance of RotationMotor
        if parse mark is 1:
            (expr 1).setMotorEnabled(change value)
        if parse mark is 2:
            (expr 1).setServoEnabled(change value)
        if parse mark is 3:
            (expr 1).setSpringEnabled(change value)
        if parse mark is 4:
            (expr 1).setStiffnessLimited(change value)
        if parse mark is 5:
            (expr 1).setDampingLimited(change value)

###
PhysicsRigidBody
https://stephengold.github.io/Libbulletjme/lbj-en/English/rigidbody.html
###

expression [[lib]bullet[jme]] [static] rigid[ ]body [static] mass:
    return type: number
    get:
        return PhysicsRigidBody.massForStatic

expression [[lib]bullet[jme]] [a] [new] rigid[ ]body [with [shape[d]]] %object%[,] [and] [with] [mass] %number%:
    get:
        expr 1 is an instance of CollisionShape
        return new PhysicsRigidBody(expr 1, expr 2)

object property [[lib]bullet[jme]] rigid[ ]body gravity:
    return type: vector
    get:
        expr 1 is an instance of PhysicsRigidBody
        return fromJmeVector3f((expr 1).[PhysicsRigidBody]getGravity(null))
    set:
        expr 1 is an instance of PhysicsRigidBody
        (expr 1).[PhysicsRigidBody]setGravity(jmeVector3f(change value))

object property [[lib]bullet[jme]] rigid[ ]body (pos[ition]|loc[ation]):
    return type: vector
    get:
        expr 1 is an instance of PhysicsRigidBody
        return fromJmeVector3f((expr 1).[PhysicsRigidBody]getPhysicsLocation(null))
    set:
        expr 1 is an instance of PhysicsRigidBody
        (expr 1).[PhysicsRigidBody]setPhysicsLocation(jmeVector3f(change value))

object property [[lib]bullet[jme]] rigid[ ]body rot[ation]:
    get:
        expr 1 is an instance of PhysicsRigidBody
        return fromJmeQuaternion((expr 1).[PhysicsRigidBody]getPhysicsRotation(null))
    set:
        expr 1 is an instance of PhysicsRigidBody
        change value is an instance of McQuaternionf
        (expr 1).[PhysicsRigidBody]setPhysicsRotation(jmeQuaternion(change value))

# note that removing a joint from one side of it affects all sides
plural object property [[lib]bullet[jme]] rigid[ ]body joint(s| list):
    get:
        expr 1 is an instance of PhysicsRigidBody
        return ...(expr 1).[PhysicsRigidBody]listJoints()
    add:
        expr 1 is an instance of PhysicsRigidBody
        change value is an instance of PhysicsJoint
        (expr 1).[PhysicsRigidBody]addJoint(change value)
    remove:
        expr 1 is an instance of PhysicsRigidBody
        change value is an instance of PhysicsJoint
        (change value).[PhysicsJoint]destroy()
    delete:
        expr 1 is an instance of PhysicsRigidBody
        loop ...(expr 1).listJoints():
            (loop-value).[PhysicsJoint]destroy()

object property [[lib]bullet[jme]] rigid[ ]body collision shape:
    get:
        expr 1 is an instance of PhysicsRigidBody
        return (expr 1).[PhysicsRigidBody]getCollisionShape()
    set:
        expr 1 is an instance of PhysicsRigidBody
        change value is an instance of CollisionShape
        (expr 1).[PhysicsRigidBody]setCollisionShape(change value)

object property [[lib]bullet[jme]] rigid[ ]body (1¦[regular]|2¦rolling|3¦spinning) friction:
    return type: number
    get:
        expr 1 is an instance of PhysicsRigidBody
        if parse mark is 1:
            return (expr 1).[PhysicsCollisionObject]getFriction()
        if parse mark is 2:
            return (expr 1).[PhysicsCollisionObject]getRollingFriction()
        if parse mark is 3:
            return (expr 1).[PhysicsCollisionObject]getSpinningFriction()
    set:
        expr 1 is an instance of PhysicsRigidBody
        if parse mark is 1:
            (expr 1).[PhysicsCollisionObject]setFriction(change value)
        if parse mark is 2:
            (expr 1).[PhysicsCollisionObject]setRollingFriction(change value)
        if parse mark is 3:
            (expr 1).[PhysicsCollisionObject]setSpinningFriction(change value)
    delete:
        expr 1 is an instance of PhysicsRigidBody
        if parse mark is 1:
            (expr 1).[PhysicsCollisionObject]setFriction(0.5)
        if parse mark is 2:
            (expr 1).[PhysicsCollisionObject]setRollingFriction(0)
        if parse mark is 3:
            (expr 1).[PhysicsCollisionObject]setSpinningFriction(0)

object property [[lib]bullet[jme]] rigid[ ]body restitution:
    return type: number
    get:
        expr 1 is an instance of PhysicsRigidBody
        return (expr 1).[PhysicsCollisionObject]getRestitution()
    set:
        expr 1 is an instance of PhysicsRigidBody
        (expr 1).[PhysicsCollisionObject]setRestitution(change value)

object property [[lib]bullet[jme]] rigid[ ]body user (obj[ect]|data):
    get:
        expr 1 is an instance of PhysicsRigidBody
        return (expr 1).[PhysicsCollisionObject]getUserObject()
    set:
        expr 1 is an instance of PhysicsRigidBody
        (expr 1).[PhysicsCollisionObject]setUserObject(change value)

effect [[lib]bullet[jme]] apply (1¦impulse|2¦force) [effect] [(with|of)] %vector% [at] [offset] [by] %vector% to [rigid[ ]body] %object%:
    trigger:
        expr 3 is an instance of PhysicsRigidBody
        if parse mark is 1:
            (expr 3).[PhysicsRigidBody]applyImpulse(jmeVector3f(expr 1), jmeVector3f(expr 2))
        if parse mark is 2:
            (expr 3).[PhysicsRigidBody]applyForce(jmeVector3f(expr 1), jmeVector3f(expr 2))
